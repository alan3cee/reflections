What happens when you initialize a repository? Why do you need to do it?
	
	.git is ready to store my work history. The repository is neccessary 
	for saving my work history.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Staging area is a specfic collection of files that I made changes to.
	Since copying the entire working directory require huge memory, the 
	staging area relieves this burden on memory.

How can you use the staging area to make sure you have one commit per logical
change?

	Add files to the staging area ($ git add FileLocation) and compare them
	to the most recent commit ($ git diff --staged) to make sure there is 
	one logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Experimental situations/creating a new feature. Branches allows us the 
	retain our main progres	while giving us a freedom to experiment with our 
	codes on a separate progress "route". We can work on our main progress and
	our experimental "route" simultaneously.

How do the diagrams help you visualize the branch structure?

	Diagrams allows me to visually identify how work progress diverges and 
	converges at various commits.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	All the changes in both branches are combined into a single commit. The
	diagram allows us to easily visualise how the two branches diverge and
	then finally converges into one commit.

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?
	
	Automatic merging allows us to combine multiple branches quickly, but 
	modified files that passes through Git's conflict detection can 
	cause bugs. Always doing merges manually, on the other hand, resolves 
	conflicts on the spot but would take a long time processing the combination.
	Furthermore, manual merging might result in bugs due to human errors.